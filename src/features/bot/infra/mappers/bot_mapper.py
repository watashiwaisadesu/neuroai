from src.infra.logging.setup_async_logging import async_logger
logger = async_logger
from typing import Optional

# Import your specific Entity, ORM, and VOs
from src.features.bot.domain.entities.bot_entity import BotEntity
from src.features.bot.infra.persistence.models.bot import BotORM
from src.features.bot.domain.value_objects.ai_configuration_vo import AIConfigurationSettings
from src.features.bot.domain.value_objects.bot_quota_vo import BotQuota




class BotMapper:
    """
    Handles mapping between BotEntity domain objects and BotORM persistence objects.
    This class is not a dataclass as its primary role is behavioral (mapping logic),
    not data storage.
    """

    def to_entity(self, orm_obj: BotORM) -> Optional[BotEntity]:
        """
        Maps a BotORM object from the persistence layer to a BotEntity domain object.
        Includes handling for value objects and inherited BaseEntity fields.
        """
        if not orm_obj:
            logger.debug("Received None BotORM object, returning None entity.")
            return None

        try:
            # 1. Create Value Objects from ORM fields.
            # Assuming AIConfigurationSettings and BotQuota are also dataclasses or
            # have constructors that accept these arguments directly.
            ai_settings = AIConfigurationSettings(
                instructions=orm_obj.instructions,
                temperature=orm_obj.temperature,
                top_p=orm_obj.top_p,
                top_k=orm_obj.top_k,
                max_response=orm_obj.max_response,
                repetition_penalty=orm_obj.repetition_penalty,
                generation_model=orm_obj.generation_model
            )

            quota = BotQuota(
                token_limit=orm_obj.token_limit,
                tokens_left=orm_obj.tokens_left
            )

            # 2. Create BotEntity instance using VOs and other fields.
            # Pass all necessary fields to the BotEntity's __init__ (generated by dataclass).
            # This includes fields from BaseEntity (uid, created_at, updated_at).
            entity = BotEntity(
                # BaseEntity fields (inherited by BotEntity dataclass)
                uid=orm_obj.uid,
                created_at=orm_obj.created_at,
                updated_at=orm_obj.updated_at,

                # Core Bot fields (note: these are now passed directly,
                # the dataclass handles setting them to _user_uid and _bot_type
                # and your @property decorators provide public access)
                user_uid=orm_obj.user_uid,
                bot_type=orm_obj.bot_type,

                # Value Objects
                ai_settings=ai_settings,
                quota=quota,

                # Other direct attributes
                name=orm_obj.name,
                status=orm_obj.status,
                tariff=orm_obj.tariff,
                auto_deduction=orm_obj.auto_deduction,
                crm_lead_id=orm_obj.crm_lead_id
            )
            return entity

        except Exception as e:
            logger.error(f"Error mapping BotORM (UID: {getattr(orm_obj, 'uid', 'N/A')}) to BotEntity: {e}", exc_info=True)
            # Re-raise the exception to indicate a mapping failure.
            raise

    def from_entity(self, entity: BotEntity) -> Optional[BotORM]:
        """
        Maps a BotEntity domain object to a BotORM object for persistence.
        Flattens value objects and gathers all relevant fields.
        """
        if not entity:
            logger.debug("Received None BotEntity object, returning None ORM.")
            return None

        try:
            # Flatten VOs and gather all fields for ORM creation.
            # Access _user_uid and _bot_type directly or via their properties.
            # Properties are generally preferred for consistency.
            orm_data = {
                # BaseEntity fields
                "uid": entity.uid,
                "created_at": entity.created_at,
                "updated_at": entity.updated_at,

                # Core Bot fields (access via properties for public interface)
                "user_uid": entity.user_uid,
                "bot_type": entity.bot_type,

                # Fields from AIConfigurationSettings VO
                "instructions": entity.ai_settings.instructions,
                "temperature": entity.ai_settings.temperature,
                "top_p": entity.ai_settings.top_p,
                "top_k": entity.ai_settings.top_k,
                "max_response": entity.ai_settings.max_response,
                "repetition_penalty": entity.ai_settings.repetition_penalty,
                "generation_model": entity.ai_settings.generation_model,

                # Fields from BotQuota VO
                "token_limit": entity.quota.token_limit,
                "tokens_left": entity.quota.tokens_left,

                # Other direct attributes
                "name": entity.name,
                "status": entity.status,
                "tariff": entity.tariff,
                "auto_deduction": entity.auto_deduction,
                "crm_lead_id": entity.crm_lead_id
            }
            return BotORM(**orm_data)

        except Exception as e:
            logger.error(f"Error mapping BotEntity (UID: {getattr(entity, 'uid', 'N/A')}) to BotORM: {e}", exc_info=True)
            # Re-raise the exception to indicate a mapping failure.
            raise